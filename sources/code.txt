______________________serveur.c____________________


void sendTrainbyHourAndCity(int socketService, char *sncf){
    char *departure = (char *)malloc(sizeof(char) * 50);
    char *arrival = (char *)malloc(sizeof(char) * 50);
    char *hour = (char *)malloc(sizeof(char) * 50);
    char *Train = (char*)malloc(sizeof(char) * 50);

    int len;
    // reading of the departure's size
    read(socketService, &len, sizeof(int));
    // reading of departure
    read(socketService, departure, sizeof(char) * len);
    departure[len] = '\0';

    // lecture de la taille de arrival
    read(socketService, &len, sizeof(int));
    // lecture de arrival
    read(socketService, arrival, sizeof(char) * len);
    arrival[len] = '\0';

    // lecture de la taille de hour
    read(socketService, &len, sizeof(int));
    // lecture de hour
    read(socketService, hour, sizeof(char) * len);

    hour[len] = '\0';
    Train = getTrainByGivenDepartureCity(sncf,departure, arrival, hour);
    int lenTrain=strlen(Train);
    
    // sending the size of the string
    write(socketService, &lenTrain, sizeof(int));

    // sending the string (train -> full line of sncf.txt file)
    write(socketService, Train, lenTrain * sizeof(char));
    free(departure);
    free(arrival);
    free(hour);
}


_______________________client.c______________________

void getTrainbyHourAndCityFromServer(int socketServeur){

    int user_option = 1;
    
    write(socketServeur,&user_option,sizeof(int));
    askAndSendDeparture(socketServeur);
    askAndSendArrival(socketServeur);
    askAndSendTime(socketServeur,1);
    
    int strLength;
    // reading size of the train
    read(socketServeur, &strLength, sizeof(int));
    printf("len %d \n", strLength);
    char *train =(char*) malloc(sizeof(char) * strLength);

    // reading the value of the train
    read(socketServeur, train, strLength * sizeof(char));


    int trainNumber = 0;
    char departure[50];
    char arrival[50];
    char limit1[50];
    char limit2[50];
    float price = 0.0;
    char promotion[50];

    sscanf(train, "%d;%[^;];%[^;];%[^;];%[^;];%f;%s", &trainNumber, departure, arrival, limit1, limit2, &price, promotion);
    printf("Here are the trains going from %s to %s :\n\t\t\tstart : %s\n\t\t\tstop : %s\n\t\t\tprice : %f\n", departure, arrival, limit1, limit2, price);
    free(train);
}

_______________________________sncf.c__________________________


char *getTrainByGivenDepartureCity(char *sncf, char *departure, char *arrival, char *hour){
    
    char **trainDepartureCity =(char**) malloc(sizeof(char*) * 50);

    FILE* fichier = fopen(sncf,"r");
    if(fichier == NULL){
        perror("Ouverture de fichier : Ã©chec...");
        exit(0);
    }

    /*creation of the table*/
    char currentLine[1024];
    char *first_train=(char*) malloc(sizeof(char) * 50);
    char *currentLine_exploitable =(char*) malloc(sizeof(char) * 50);
    char *char_retour =(char*) malloc(sizeof(char) * 50);

    /*filling in the table*/
    int i = 0;
    while (fscanf(fichier, "%[^\n] ", currentLine) != EOF) {
        
        strcpy(currentLine_exploitable,currentLine);

        char *trainNumber = strtok(currentLine, ";");
        char *stratCity = strtok(NULL, ";");
        char *arrivedCity = strtok(NULL, ";");
        if (strcmp(departure,stratCity)==0 && strcmp(arrival,arrivedCity)==0){
            trainDepartureCity[i] =(char*) malloc(sizeof(char) * 50);

            strcpy(trainDepartureCity[i],currentLine_exploitable);
            i++;
        }
    }

    /*research of table length*/
    int len = 0;
    while(trainDepartureCity[len] != NULL){
        len++;
    }

    /*Iterating through the array to select informations*/
    for(int elm = 0; elm < len; elm++){
        if(elm == 0){
            strcpy(first_train,trainDepartureCity[elm]);
        }
        strcpy(currentLine_exploitable,trainDepartureCity[elm]);
        char *trainNumber = strtok(trainDepartureCity[elm], ";");
        char *stratCity = strtok(NULL, ";");
        char *arrivedCity = strtok(NULL, ";");
        char *hourTraject = strtok(NULL, ";");

        if (strcmp(hourTraject,hour) >= 0){
            strcpy(char_retour,currentLine_exploitable);
        }

    }
    strcpy(char_retour,first_train);
    fclose(fichier);
    return char_retour;
    
}

